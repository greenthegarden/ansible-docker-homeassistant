---
- name: Run Home Assistant Stack

  hosts: localhost

  vars:

  pre_tasks:

    - name: Check Python dependencies
      community.general.python_requirements_info:
        dependencies:
          - docker>=5.0.0
          - python-consul
      register: python_requirements
      tags:
        - always

    - name: Ensure Python 3 is being used
      ansible.builtin.assert:
        that:
          - python_requirements.python_version_info.major == 3
        fail_msg: "Python 3 is required"
        success_msg: "Python 3 found"
      tags:
        - always

    - name: Install any required python modules
      ansible.builtin.pip:
        name: "{{ item }}"
      loop: "{{ python_requirements.not_found }}"
      when: python_requirements.not_found | length > 0
      tags:
        - always

    # - name: create configuration directory for user
    #   ansible.builtin.user:
    #     name: "{{ ansible_user }}"
    #     state: present
    #   register: ansible_user_registered
    #   tags:
    #     - always
    #   when: 0

    - name: Run message
      ansible.builtin.debug:
        msg: "Running on host {{ ansible_hostname }} via {{ ansible_default_ipv4.interface }} @ {{ ansible_default_ipv4.address }} as user {{ ansible_user_id }}"
      tags:
        - always

  tasks:

    ####### HOMEASSISTANT CONFIGURATION SECTION

    - name: Set Home Assistant Consul facts
      ansible.builtin.set_fact:
        homeassistant_consul_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      tags:
        - homeassistant
        - configuration

    # Expects the following to be stored in Consul
    # as key homeassistant/config
    # {
    #   "name": "Home",
    #   "latitude": 51.056145,
    #   "longitude": 2.736947,
    #   "elevation": 45,
    #   "unit_system": "metric",
    #   "time_zone": "Europe/London",
    #   "currency": "GBP"
    # }

    # - name: Add or update Home Assistant configuration in the key/value store
    #   community.general.consul_kv:
    #     host: "{{ homeassistant_consul_host }}"
    #     key: "homeassistant/{{ item.key }}"
    #     value: "{{ item.value }}"
    #   with_items:
    #     - {key: name, value: Home}
    #     - {key: latitude, value: 51.056145}
    #     - {key: longitude, value: 2.736947}
    #     - {key: elevation, value: 45}
    #     - {key: unit_system, value: metric}
    #     - {key: time_zone, value: Europe/London}
    #     - {key: currency, value: GBP}
    #   tags:
    #     - homeassistant
    #     - configuration



    ####### HOMEASSISTANT NETWORK SECTION

    # Based on
    # https://community.home-assistant.io/t/how-to-run-homeassistant-on-docker-on-its-own-network-instead-of-the-host-network/189315/4

    - name: Set HomeAssistant network facts
      ansible.builtin.set_fact:
        iprange: "192.168.1.240/28"
        subnet: "192.168.1.1/24"
        gateway: "192.168.1.1"
        homeassistant_network_name: homeassistant-network

    - name: Create a HomeAssistant network
      community.docker.docker_network:
        name: "{{ homeassistant_network_name | default('homeassistant-network') }}"
        internal: false

    - name: Create docker macvlan trunked network
      community.docker.docker_network:
        driver: macvlan
        enable_ipv6: no
        internal: no
        name: "{{homeassistant_network_name}}"
        ipam_config:
        - gateway: "{{gateway}}"
          iprange: "{{iprange}}"
          subnet: "{{subnet}}"
      when: 0

    ####### HOME ASSISTANT DB SECTION

    # https://hub.docker.com/_/mariadb/

    - name: Set Home Assistant DB facts
      ansible.builtin.set_fact:
        homeassistant_db_image_name: mariadb
        homeassistant_db_image_tag: latest
        homeassistant_db_container_name: homeassistant-db
        homeassistant_db_container_port: 3306
        homeassistant_db_volume: homeassistant-db-volume
      tags:
        - mariadb
        - homeassistant-db
        - homeassistant

    - name: Set Home Assistant DB database facts
      ansible.builtin.set_fact:
        homeassistant_db_mysql_database: homeassistant
        homeassistant_db_mysql_user: homeassistant
        homeassistant_db_mysql_password: homeassistant
        homeassistant_db_root_password: mysqlrootpassword
      tags:
        - mariadb
        - homeassistant-db
        - homeassistant

    - name: Create Home Assistant DB volume
      community.docker.docker_volume:
        name: "{{ homeassistant_db_volume }}"
        state: present
      tags:
        - mariadb
        - homeassistant-db
        - homeassistant

    - name: Check if Home Assistant DB is running
      community.docker.docker_container_info:
        name: "{{ homeassistant_db_container_name }}"
      register: homeassistant_db_state
      tags:
        - mariadb
        - homeassistant-db
        - homeassistant

    - block:

        - name: Pull Home Assistant DB image
          community.docker.docker_image:
            name: "{{ homeassistant_db_image_name }}:{{ homeassistant_db_image_tag | default('latest') }}"
            source: pull
          tags:
            - mariadb
            - homeassistant-db
            - homeassistant

        # docker run --name some-mariadb -e homeassistant_db_PASSWORD=mysecretpassword -d mariadb
        - name: Start Home Assistant DB
          community.docker.docker_container:
            name: "{{ homeassistant_db_container_name | default('homeassistant-db') }}"
            image: "{{ homeassistant_db_image_name }}:{{ homeassistant_db_image_tag | default('latest') }}"
            detach: true
            env:
              MYSQL_DATABASE: "{{ homeassistant_db_mysql_database }}"
              MYSQL_USER: "{{ homeassistant_db_mysql_user }}"
              MYSQL_PASSWORD: "{{ homeassistant_db_mysql_password }}"
              MYSQL_ROOT_PASSWORD: "{{ homeassistant_db_root_password }}"
            networks_cli_compatible: true
            networks:
              - name: "{{ homeassistant_network_name }}"
            published_ports:
              - "{{ homeassistant_db_container_port | default(3306) }}:3306"
            restart: true
            restart_policy: unless-stopped
            volumes:
              - "{{ homeassistant_db_volume }}:/var/lib/mysql"
              - /etc/localtime:/etc/localtime:ro
          register: homeassistant_db_register
          tags:
            - mariadb
            - homeassistant-db
            - homeassistant

        - name: Wait for Home Assistant DB to accept connections
          ansible.builtin.wait_for:
            # host: "{{ homeassistant_db_register['container']\
            #   ['NetworkSettings']\
            #   ['Networks']\
            #   ['homeassistant-network']\
            #   ['IPAddress'] }}"
            host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            port: "{{ homeassistant_db_container_port | default(3306) }}"
            connect_timeout: 1
            delay: 10
            state: started
            timeout: 30
          register: homeassistant_db_running
          retries: 10
          until: homeassistant_db_running is success
          tags:
            - mariadb
            - homeassistant-db
            - homeassistant

      when: not homeassistant_db_state.exists

    ####### HOME ASSISTANT INFLUXDB SECTION

    # https://hub.docker.com/_/mariadb/

    - name: Set Home Assistant InfluxDB facts
      ansible.builtin.set_fact:
        homeassistant_influxdb_image_name: influxdb
        homeassistant_influxdb_image_tag: 1.8
        homeassistant_influxdb_container_name: homeassistant-influxdb
        homeassistant_influxdb_container_port: 8086
        homeassistant_influxdb_volume: homeassistant-influxdb-volume
      tags:
        - homeassistant-influxdb
        - homeassistant

    - name: Set Home Assistant InfluxDB Database facts
      ansible.builtin.set_fact:
        homeassistant_influxdb_db: homeassistant
        homeassistant_influxdb_admin_user: homeassistant
        homeassistant_influxdb_admin_password: homeassistant
        homeassistant_influxdb_read_user: homeassistant
        homeassistant_influxdb_read_password: homeassistant
      tags:
        - homeassistant-influxdb
        - homeassistant

    - name: Create Home Assistant InfluxDB volume
      community.docker.docker_volume:
        name: "{{ homeassistant_influxdb_volume }}"
        state: present
      tags:
        - homeassistant-influxdb
        - homeassistant

    - name: Check if Home Assistant InfluxDB is running
      community.docker.docker_container_info:
        name: "{{ homeassistant_influxdb_container_name }}"
      register: homeassistant_influxdb_state

    - block:

        - name: Pull Home Assistant InfluxDB Image
          community.docker.docker_image:
            name: "{{ homeassistant_influxdb_image_name }}:{{ homeassistant_influxdb_image_tag | default('latest') }}"
            source: pull
          tags:
            - homeassistant-influxdb
            - homeassistant

        # docker run --name some-mariadb -e homeassistant_influxdb_PASSWORD=mysecretpassword -d mariadb
        - name: Start Home Assistant InfluxDB
          community.docker.docker_container:
            name: "{{ homeassistant_influxdb_container_name | default('homeassistant_influxdb') }}"
            image: "{{ homeassistant_influxdb_image_name }}:{{ homeassistant_influxdb_image_tag | default('latest') }}"
            detach: true
            env:
              INFLUXDB_DB: "{{ homeassistant_influxdb_db }}"
              INFLUXDB_ADMIN_USER: "{{ homeassistant_influxdb_admin_user }}"
              INFLUXDB_ADMIN_PASSWORD: "{{ homeassistant_influxdb_admin_password }}"
              INFLUXDB_READ_USER: "{{ homeassistant_influxdb_read_user }}"
              INFLUXDB_READ_PASSWORD: "{{ homeassistant_influxdb_read_password }}"
            networks_cli_compatible: true
            networks:
              - name: homeassistant-network
            published_ports:
              - "{{ homeassistant_influxdb_container_port | default(8086) }}:8086"
            restart: true
            restart_policy: unless-stopped
            volumes:
              - "{{ homeassistant_influxdb_volume }}:/var/lib/influxdb"
              - /etc/localtime:/etc/localtime:ro
          register: homeassistant_influxdb_register
          tags:
            - homeassistant-influxdb
            - homeassistant

        - name: Wait for Home Assistant InfluxDB to accept connections
          ansible.builtin.wait_for:
            host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            port: "{{ homeassistant_influxdb_container_port | default(8086) }}"
            connect_timeout: 1
            delay: 10
            state: started
            timeout: 30
          register: homeassistant_influxdb_running
          until: homeassistant_influxdb_running is success
          retries: 10
          tags:
            - homeassistant-influxdb
            - homeassistant

        - name: Set Grafana facts
          ansible.builtin.set_fact:
            grafana_container_name: grafana
            grafana_container_port: 3000
          tags:
            - homeassistant-influxdb
            - homeassistant
            - grafana

        - name: Set Grafana API facts
          ansible.builtin.set_fact:
            grafana_instance: "{{ grafana_container_name | default('grafana') }}"
            # Use domain name here as Grafana is running on a different Docker network
            grafana_api_url: "http://{{ ansible_default_ipv4.address }}:{{ grafana_container_port }}"
            grafana_security: {admin_user: admin, admin_password: "monitoring"}
            grafana_use_provisioning: false  # will use API
          tags:
            - homeassistant-influxdb
            - homeassistant
            - grafana

        - name: Check if Grafana is running
          community.docker.docker_container_info:
            name: "{{ grafana_container_name }}"
          register: grafana_state
          tags:
            - homeassistant-influxdb
            - homeassistant
            - grafana

        - name: Create Grafana datasources
          community.grafana.grafana_datasource:
            name: "{{ item.name }}"
            grafana_url: "{{ grafana_api_url }}"
            grafana_user: "{{ grafana_security.admin_user }}"
            grafana_password: "{{ grafana_security.admin_password }}"
            org_id: "1"
            ds_type: "{{ item.type }}"
            ds_url: "{{ item.url }}"
            database: "{{ homeassistant_influxdb_db }}"
            access: "{{ item.access }}"
            tls_skip_verify: true
            state: present
          with_items: "{{ grafana_datasources }}"
          vars:
            grafana_datasources:
              - name: InfluxDB
                type: influxdb
                access: proxy
                url: "http://{{ ansible_default_ipv4.address }}:{{ homeassistant_influxdb_container_port | default(8086) }}"
                user: "{{ homeassistant_influxdb_read_user }}"
                basic_auth_user: "{{ homeassistant_influxdb_read_user }}"
                basic_auth_password: "{{ homeassistant_influxdb_read_password }}"
          tags:
            - homeassistant-influxdb
            - homeassistant
            - grafana

      when: not homeassistant_influxdb_state.exists

    ###### HOME ASSISTANT SECTION

    - name: Set Home Assistant facts
      ansible.builtin.set_fact:
        homeassistant_image_name: homeassistant/home-assistant
        homeassistant_image_tag: '2022.7'
        homeassistant_container_name: homeassistant
        homeassistant_container_port: 8123
        homeassistant_volume: homeassistant-volume
      tags:
        - homeassistant

    - name: Define Home Assistant configuration directory
      ansible.builtin.set_fact:
        # homeassistant_config_dir: "{{ ansible_user_registered.home }}/{{ homeassistant_container_name }}"
        homeassistant_config_dir: "/home/{{ ansible_user_id }}/config/{{ homeassistant_container_name }}"
      tags:
        - homeassistant

    - name: Create Home Assistant configuration directory
      ansible.builtin.file:
        path: "{{ homeassistant_config_dir }}"
        state: directory
        mode: '0755'
      tags:
        - homeassistant
    
    - name: Copy Home Assistant configuration files
      ansible.posix.synchronize:
        src: files/home-assistant/
        dest: "{{ homeassistant_config_dir }}"
      tags:
        - homeassistant
        
    - name: Retrieve Home Assistant configuration from key/value store
      community.general.consul_kv:
        key: homeassistant/config
      register: homeassistant_retrieved_config
      tags:
        - homeassistant
        - configuration

    - name: Check Home Assistant configuration is not empty
      ansible.builtin.assert:
        that:
          - "'data' in homeassistant_retrieved_config"
          - (homeassistant_retrieved_config.data | type_debug == 'dict')
        fail_msg: "No data associated with homeassistant/config key"
        quiet: true
      tags:
        - homeassistant
        - configuration

    - name: Store Home Assistant configuration
      ansible.builtin.set_fact:
        homeassistant_configuration: "{{ homeassistant_retrieved_config.data.Value | from_json }}"
      tags:
        - homeassistant
        - configuration

    - name: Create Home Assistant configuration
      ansible.builtin.template:
        src: templates/home-assistant/configuration.yaml.j2
        dest: "{{ homeassistant_config_dir }}/configuration.yaml"
        mode: '0644'
      register: homeassistant_config_state
      tags:
        - homeassistant

    - name: Create Home Assistant volume
      community.docker.docker_volume:
        name: "{{ homeassistant_volume }}"
        state: present
      tags:
        - homeassistant

    - name: Check if Home Assistant is running
      community.docker.docker_container_info:
        name: "{{ homeassistant_container_name }}"
      register: homeassistant_state

    - block:

        - name: Pull Home Assistant image
          community.docker.docker_image:
            name: "{{ homeassistant_image_name }}:{{ homeassistant_image_tag | default('latest') }}"
            source: pull
          tags:
            - homeassistant

        - name: Start Home Assistant
          community.docker.docker_container:
            name: "{{ homeassistant_container_name | default('homeassistant') }}"
            image: "{{ homeassistant_image_name }}:{{ homeassistant_image_tag | default('latest') }}"
            detach: true
            env:
              MYSQL_HOST: "{{ homeassistant_db_container_name | default('homeassistant') }}"
              MYSQL_DATABASE: "{{ homeassistant_db_mysql_database | default('homeassistant') }}"
              MYSQL_USER: "{{ homeassistant_db_mysql_user | default('homeassistant') }}"
              MYSQL_PASSWORD: "{{ homeassistant_db_mysql_password | default('homeassistant') }}"
            networks_cli_compatible: true
            networks:
              - name: "{{ homeassistant_network_name }}"
                links:
                  - "{{ homeassistant_db_container_name }}"
            published_ports:
              - "{{ homeassistant_container_port | default(8123) }}:8123"
            restart: true
            restart_policy: unless-stopped
            state: started
            volumes:
              - "{{ homeassistant_config_dir }}/home-assistant:/config"
              - /etc/localtime:/etc/localtime:ro
              - /var/run/docker.sock:/var/run/docker.sock
          tags:
            - homeassistant

        - name: Wait for Home Assistant to accept connections
          ansible.builtin.wait_for:
            host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            port: "{{ homeassistant_container_port | default(8123) }}"
            connect_timeout: 1
            delay: 10
            state: started
            timeout: 30
          register: homeassistant_running
          until: homeassistant_running is success
          retries: 10
          tags:
            - homeassistant

        - name: Set Grafana facts
          ansible.builtin.set_fact:
            grafana_container_name: grafana
            grafana_container_port: 3000
          tags:
            - homeassistant
            - grafana

        - name: Set Grafana API facts
          ansible.builtin.set_fact:
            grafana_instance: "{{ grafana_container_name | default('grafana') }}"
            # Use domain name here as Grafana is running on a different Docker network
            grafana_api_url: "http://{{ ansible_default_ipv4.address }}:{{ grafana_container_port }}"
            grafana_security: {admin_user: admin, admin_password: "monitoring"}
            grafana_use_provisioning: false  # will use API
          tags:
            - homeassistant
            - grafana

        - name: Check if Grafana is running
          community.docker.docker_container_info:
            name: "{{ grafana_container_name }}"
          register: grafana_state
          tags:
            - homeassistant
            - grafana

        - name: Create Grafana dashboard
          community.grafana.grafana_dashboard:
            grafana_url: "{{ grafana_api_url }}"
            # grafana_api_key: "{{ grafana_api_key }}"
            grafana_user: "{{ grafana_security.admin_user }}"
            grafana_password: "{{ grafana_security.admin_password }}"
            # folder: General
            dashboard_url: "https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.dashboard_revision }}/download"
          vars:
            grafana_dashboards:
              # Home Assistant System by goyalankit
              # https://grafana.com/grafana/dashboards/15832
              - dashboard_id: '15832'
                dashboard_revision: '2'
                datasource: 'InfluxDB'
              # Home Energy Usage v2 by afreels
              # https://grafana.com/grafana/dashboards/13950
              - dashboard_id: '13950'
                dashboard_revision: '3'
                datasource: 'Prometheus'
          with_items: "{{ grafana_dashboards }}"
          tags:
            - homeassistant
            - grafana

      when: (not homeassistant_state.exists) or (homeassistant_config_state.changed)

    ####### APPDAEMON SECTION

    # https://appdaemon.readthedocs.io/en/latest/HASS_TUTORIAL.html

    - name: Set AppDaemon facts
      ansible.builtin.set_fact:
        appdaemon_image_name: acockburn/appdaemon
        appdaemon_image_tag: 4.2.1
        appdaemon_container_name: appdaemon
        appdaemon_container_port: 5050
      tags:
        - appdaemon

    - name: Set AppDaemon Dash facts
      ansible.builtin.set_fact:
        appdeamon_dash_url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ appdaemon_container_port }}"
      tags:
        - appdaemon

    - name: Set AppDaemon Home Assistant facts
      ansible.builtin.set_fact:
        appdaemon_homeassistant_url: "http://{{ homeassistant_container_name }}:{{ homeassistant_container_port }}"
        appdaemon_homeassistant_token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJkZTkzNjNiMDYyYjU0MjdhYmQwMDc5ZmI5Y2JjYTJhMiIsImlhdCI6MTY1NDM0Njc3NiwiZXhwIjoxOTY5NzA2Nzc2fQ.GX2ePT9n21SNZhrCfM3ECyfPL5cyJQTVX5LuIM82sEs'
      tags:
        - appdaemon

    - name: Check if AppDaemon is running
      community.docker.docker_container_info:
        name: "{{ appdaemon_container_name }}"
      register: appdaemon_state
      tags:
        - appdaemon

    - block:

      - name: Pull AppDaemon image
        community.docker.docker_image:
          name: "{{ appdaemon_image_name }}:{{ appdaemon_image_tag | default('latest') }}"
          source: pull
        tags:
          - appdaemon

      - name: Define AppDaemon configuration directory
        ansible.builtin.set_fact:
          # appdaemon_config_dir: "{{ ansible_user_registered.home }}/appdaemon"
          appdaemon_config_dir: "/home/{{ ansible_user_id }}/{{ appdaemon_container_name }}"
        tags:
          - appdaemon

      - name: Create AppDaemon configuration
        ansible.builtin.copy:
          src: appdaemon
          dest: "{{ appdaemon_config_dir }}"
          mode: "0644"
        tags:
          - appdaemon

      # docker run --name=appdaemon -d -p 5050:5050 \
      # --restart=always \
      # -e HA_URL="<your HA_URL value>" \
      # -e TOKEN="<your TOKEN value>" \
      # -e DASH_URL="http://$HOSTNAME:5050" \
      # -v <your_conf_folder>:/conf \
      # acockburn/appdaemon:latest
      - name: Start AppDaemon
        community.docker.docker_container:
          name: "{{ appdaemon_container_name | default('appdaemon')}}"
          image: "{{ appdaemon_image_name }}:{{ appdaemon_image_tag | default('latest') }}"
          # command: -D DEBUG
          detach: true
          env:
            HA_URL: "{{ appdaemon_homeassistant_url }}"
            TOKEN: "{{ appdaemon_homeassistant_token }}"
            DASH_URL: "{{ appdeamon_dash_url }}"
          networks_cli_compatible: true
          networks:
            - name: "{{ homeassistant_network_name }}"
          published_ports:
            - "{{ appdaemon_container_port | default(5050) }}:5050"
          restart: true
          restart_policy: unless-stopped
          state: started
          # user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
          volumes:
            - "{{ appdaemon_config_dir }}:/conf"
            - /etc/localtime:/etc/localtime:ro
        tags:
          - appdaemon

      - name: Wait for AppDaemon to accept connections
        ansible.builtin.wait_for:
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ appdaemon_container_port | default(5050) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: appdaemon_running
        until: appdaemon_running is success
        retries: 10
        tags:
          - appdaemon

      # when: not appdaemon_state.exists
      when: 0

    ####### NUT-UPSD SECTION

    # https://networkupstools.org/
    # https://hub.docker.com/r/upshift/nut-upsd

    - name: Set NUT-UPSd facts
      ansible.builtin.set_fact:
        nut_upsd_image_name: upshift/nut-upsd
        nut_upsd_image_tag: '2.8.0'
        nut_upsd_container_name: nut-upsd
        nut_upsd_container_port: 3493
      tags:
        - nut-upsd

    - name: Set UPS configuration facts
      ansible.builtin.set_fact:
        nut_upsd_ups_device: '/dev/bus/usb/004/003'
        nut_upsd_ups_name: 'ups'
        nut_upsd_ups_desc: 'APC Back-UPS ES 550G'
        nut_upsd_ups_driver: 'usbhid-ups'
        nut_upsd_ups_port: 'auto'
        nut_upsd_api_user: 'homeassistant'
        nut_upsd_api_password: 'homeassistant'
      tags:
        - nut-upsd

    - name: Check if NUT-UPSd is running
      community.docker.docker_container_info:
        name: "{{ nut_upsd_container_name }}"
      register: nut_upsd_state
      tags:
        - nut-upsd

    - block:

      - name: Pull NUT-UPSd image
        community.docker.docker_image:
          name: "{{ nut_upsd_image_name }}:{{ nut_upsd_image_tag | default('latest') }}"
          source: pull
        tags:
          - nut-upsd

      # https://github.com/gpdm/nut/tree/master/nut-upsd
      # check devices using
      # lsusb
      # Bus 008 Device 002: ID 051d:0002 American Power Conversion Uninterruptible Power Supply
      # devices:
      #   - "/dev/bus/usb/008/002"
      - name: Start NUT-UPSd
        community.docker.docker_container:
          name: "{{ nut_upsd_container_name | default('nut-upsd') }}"
          image: "{{ nut_upsd_image_name }}:{{ nut_upsd_image_tag | default('latest') }}"
          detach: true
          devices:
            - "{{ nut_upsd_ups_device }}"
          env:
            UPS_NAME: "{{ nut_upsd_ups_name }}"
            UPS_DESC: "{{ nut_upsd_ups_desc }}"
            UPS_DRIVER: "{{ nut_upsd_ups_driver }}"
            UPS_PORT: "{{ nut_upsd_ups_port }}"
            API_USER: "{{ nut_upsd_api_user }}"
            API_PASSWORD: "{{ nut_upsd_api_password }}"
          networks_cli_compatible: true
          networks:
            - name: "{{ homeassistant_network_name }}"
          published_ports:
            - "{{ nut_upsd_container_port | default(3493) }}:3493"
          restart: true
          restart_policy: unless-stopped
          state: started
        tags:
          - nut-upsd

      - name: Wait for NUT-UPSd to accept connections
        ansible.builtin.wait_for:
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ nut_upsd_container_port | default(3493) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: nut_upsd_running
        until: nut_upsd_running is success
        retries: 10
        tags:
          - nut-upsd

      # when: not nut_upsd_state.exists
      when: 0

    ####### THE SILLY HOME SECTION

    # https://github.com/lcmchris/thesillyhome-container/

    - name: Set The Silly Home facts
      ansible.builtin.set_fact:
        thesillyhome_image_name: lcmchris1/thesillyhome-container
        thesillyhome_image_tag: dev
        thesillyhome_container_name: thesillyhome
        thesillyhome_container_port: 2300
        thesillyhome_volume: thesillyhome_config
        thesillyhome_conf_mount: false
      tags:
        - thesillyhome
        - homeassistant

    - name: Set The Silly Home Configuration facts
      ansible.builtin.set_fact:
        thesillyhome_homeassistant_url: "http://{{ homeassistant_container_name }}:{{ homeassistant_container_port }}"
        thesillyhome_homeassistant_token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJlYmQ5NzU0YWVhNDc0OGRjOWQ3ZmYyMzM5MDNkYmU1MiIsImlhdCI6MTY1ODQwMDgzMywiZXhwIjoxOTczNzYwODMzfQ.T5sYllDshC7lScAeH3JqTL-achpZQOHwJMQ9YDNsNWM'
      tags:
        - appdaemon

    - block:

      - name: Define The Silly Home configuration directory
        ansible.builtin.set_fact:
          # homeassistant_config_dir: "{{ ansible_user_registered.home }}/{{ homeassistant_container_name }}"
          thesillyhome_config_dir: "/home/{{ ansible_user_id }}/{{ thesillyhome_container_name }}"
        tags:
          - thesillyhome
          - homeassistant

      - name: Create The Silly Home configuration directory
        ansible.builtin.file:
          path: "{{ thesillyhome_config_dir }}"
          state: directory
          mode: '0755'
        tags:
          - thesillyhome
          - homeassistant

      - name: Copy The Silly Home configuration
        ansible.builtin.copy:
          src: files/thesillyhome/options.json
          dest: "{{ thesillyhome_config_dir }}/options.json"
          mode: '0755'
        tags:
          - thesillyhome
          - homeassistant
    
      when: thesillyhome_conf_mount

    - name: Create The Silly Home volume
      community.docker.docker_volume:
        name: "{{ thesillyhome_volume }}"
        state: present
      tags:
        - thesillyhome
        - homeassistant

    - name: Check if The Silly Home is running
      community.docker.docker_container_info:
        name: "{{ thesillyhome_container_name }}"
      register: thesillyhome_state
      tags:
        - thesillyhome
        - homeassistant

    - block:

        - name: Pull The Silly Home image
          community.docker.docker_image:
            name: "{{ thesillyhome_image_name }}:{{ thesillyhome_image_tag | default('latest') }}"
            source: pull
          tags:
            - thesillyhome
            - homeassistant

        - name: Export The Silly Home Dockerfile
          ansible.builtin.copy:
            src: files/thesillyhome
            dest: /tmp/
          tags:
            - thesillyhome
            - homeassistant

        - name: Create The Silly Home configuration file
          ansible.builtin.template:
            src: templates/thesillyhome/options.json.j2
            dest: /tmp/thesillyhome/options.json
            mode: '0644'
          register: thesillyhome_config_state
          tags:
            - thesillyhome
            - homeassistant

        - name: Build a The Silly Home image with configuration
          community.docker.docker_image:
            build:
              path: /tmp/thesillyhome
            name: "{{ thesillyhome_image_name }}"
            tag: config
            source: build
          tags:
            - thesillyhome
            - homeassistant

        # docker run --name some-mariadb -e thesillyhome_PASSWORD=mysecretpassword -d mariadb
        - name: Start The Silly Home
          community.docker.docker_container:
            name: "{{ thesillyhome_container_name | default('homeassistant_db') }}"
            image: "{{ thesillyhome_image_name }}:config"
            detach: true
            networks_cli_compatible: true
            networks:
              - name: homeassistant-network
            published_ports:
              - "{{ thesillyhome_container_port | default(2300) }}:2300"
            restart: true
            restart_policy: unless-stopped
            volumes:
              - "{{ thesillyhome_volume }}:/thesillyhome_src/data/"
              # - "{{ thesillyhome_config_dir }}/options.json:/thesillyhome_src/data/config/options.json"
              - /etc/localtime:/etc/localtime:ro
          register: thesillyhome_register
          tags:
            - thesillyhome
            - homeassistant

        - name: Wait for The Silly Home to accept connections
          ansible.builtin.wait_for:
            host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
            port: "{{ thesillyhome_container_port | default(2300) }}"
            connect_timeout: 1
            delay: 10
            state: started
            timeout: 30
          register: thesillyhome_running
          until: thesillyhome_running is success
          retries: 10
          tags:
            - thesillyhome
            - homeassistant

      when: not thesillyhome_state.exists
